/**
 * @file knn.cpp
 * @author Jesús López Rodríguez (jlopezpeque@hotmail.com)
 * @brief
 * @version 0.1
 * @date 2022-04-02
 *
 * @copyright Copyright (c) 2022
 *
 */

#include "knn.h"

#include <omp.h>

#include <algorithm>
#include <cmath>
#include <fstream>
#include <iostream>
#include <vector>

#include "lector.h"
#include "paramlist.h"

using namespace std;

int valorKNN(int k_valor, vector<pair<double, int>> distancias) {
    vector<int> res = {0, 0, 0, 0};
    int label;

    sort(distancias.begin(), distancias.end());

    for (int i = 0; i < k_valor; i++) {
        int l = distancias[i].second;
        // cout << "Pos: " << i << " " << distancias[i].first << " " <<
        // distancias[i].second << endl;
        res[l]++;
    }

    // sort(res.begin(), res.end());
    int max = res[0];
    int pos_max = 0;

    for (int i = 1; i < res.size(); i++) {
        if (res[i] > max) {
            max = res[i];
            pos_max = i;
        }
    }

    label = pos_max;
    // cout << "N_0 " << res[0] << "\tN_1 " << res[1] << "\tN_2 " << res[2] <<
    // "\tElegido " << label << endl;

    return label;
}

KNN::KNN(int k) {
    lector = Lector::getInstance();
    lector->setDataBase("001");
    // lector->leerDatos(178, 3600);
    lector->leerDatos(288, 11352);
    data_test = lector->getDataTest();
    data_training = lector->getDataTraining();
    labels_test = lector->getLabelsTest();
    labels_training = lector->getLabelsTraining();
    k_valor = k;
    valor = 0.0;
}

void KNN::ejecutar() {
    vector<int> labels_knn;
    vector<int> activadas = {
        51,    52,    63,    76,    99,    104,   111,   140,   141,   146,   183,   195,   200,
        201,   225,   233,   255,   257,   275,   280,   284,   297,   320,   334,   360,   361,
        370,   395,   396,   402,   408,   410,   424,   437,   445,   454,   455,   460,   466,
        470,   474,   476,   493,   498,   505,   522,   528,   539,   542,   545,   554,   567,
        573,   601,   644,   666,   675,   677,   703,   705,   708,   713,   718,   719,   746,
        754,   777,   779,   782,   818,   859,   877,   880,   891,   895,   904,   909,   922,
        949,   962,   967,   968,   969,   989,   1034,  1045,  1054,  1056,  1075,  1079,  1081,
        1093,  1129,  1145,  1152,  1154,  1171,  1172,  1176,  1178,  1180,  1184,  1190,  1212,
        1219,  1238,  1248,  1252,  1274,  1282,  1338,  1349,  1380,  1393,  1396,  1429,  1451,
        1463,  1467,  1490,  1502,  1512,  1517,  1527,  1540,  1548,  1569,  1590,  1601,  1609,
        1655,  1661,  1666,  1677,  1686,  1746,  1748,  1786,  1796,  1820,  1821,  1826,  1860,
        1864,  1910,  1912,  1913,  1919,  2004,  2018,  2028,  2061,  2083,  2115,  2152,  2169,
        2173,  2205,  2216,  2266,  2301,  2305,  2308,  2363,  2425,  2427,  2434,  2460,  2462,
        2483,  2486,  2510,  2523,  2525,  2534,  2543,  2564,  2579,  2595,  2600,  2614,  2632,
        2635,  2644,  2658,  2663,  2679,  2729,  2730,  2739,  2742,  2751,  2752,  2761,  2769,
        2787,  2790,  2792,  2808,  2817,  2830,  2843,  2857,  2876,  2935,  2941,  2966,  3032,
        3033,  3064,  3094,  3119,  3125,  3153,  3179,  3183,  3196,  3232,  3242,  3258,  3271,
        3319,  3382,  3407,  3414,  3434,  3446,  3455,  3503,  3520,  3533,  3538,  3575,  3586,
        3594,  3595,  3608,  3630,  3656,  3708,  3713,  3725,  3732,  3736,  3788,  3806,  3821,
        3834,  3838,  3844,  3858,  3863,  3873,  3915,  3957,  3999,  4010,  4013,  4028,  4032,
        4053,  4102,  4138,  4146,  4181,  4196,  4211,  4238,  4243,  4254,  4277,  4282,  4326,
        4351,  4353,  4361,  4372,  4397,  4477,  4485,  4498,  4505,  4513,  4519,  4521,  4523,
        4536,  4552,  4568,  4569,  4575,  4576,  4577,  4593,  4637,  4640,  4653,  4671,  4673,
        4701,  4724,  4736,  4742,  4752,  4770,  4771,  4789,  4837,  4854,  4856,  4879,  4898,
        4905,  4919,  4921,  4926,  4943,  4955,  4965,  4970,  4988,  4991,  4994,  5009,  5011,
        5012,  5050,  5122,  5151,  5158,  5182,  5188,  5197,  5205,  5210,  5213,  5231,  5251,
        5262,  5263,  5281,  5298,  5306,  5349,  5359,  5360,  5370,  5386,  5396,  5400,  5420,
        5425,  5456,  5460,  5468,  5474,  5498,  5502,  5514,  5554,  5579,  5613,  5614,  5616,
        5627,  5629,  5630,  5632,  5663,  5671,  5675,  5692,  5708,  5715,  5722,  5737,  5822,
        5831,  5857,  5863,  5868,  5871,  5879,  5893,  5918,  5919,  5937,  5989,  5990,  6026,
        6027,  6040,  6057,  6070,  6074,  6080,  6090,  6111,  6143,  6158,  6185,  6188,  6195,
        6199,  6258,  6259,  6274,  6286,  6296,  6303,  6305,  6320,  6333,  6354,  6377,  6387,
        6396,  6411,  6419,  6464,  6465,  6478,  6479,  6503,  6525,  6529,  6539,  6562,  6575,
        6591,  6621,  6623,  6626,  6636,  6638,  6649,  6654,  6663,  6675,  6683,  6691,  6743,
        6760,  6783,  6786,  6816,  6845,  6849,  6874,  6882,  6900,  6910,  6916,  6932,  6934,
        6968,  6974,  6994,  7034,  7083,  7085,  7124,  7134,  7145,  7163,  7167,  7179,  7193,
        7199,  7234,  7254,  7261,  7265,  7267,  7293,  7319,  7331,  7332,  7389,  7418,  7426,
        7434,  7468,  7529,  7531,  7535,  7536,  7548,  7581,  7596,  7602,  7620,  7625,  7639,
        7660,  7666,  7678,  7704,  7706,  7710,  7711,  7721,  7780,  7828,  7832,  7854,  7894,
        7912,  7917,  7925,  7930,  7946,  7958,  7972,  7986,  8000,  8014,  8029,  8038,  8064,
        8081,  8088,  8092,  8116,  8121,  8130,  8155,  8164,  8181,  8188,  8226,  8235,  8251,
        8299,  8303,  8307,  8311,  8324,  8372,  8386,  8404,  8420,  8421,  8440,  8441,  8450,
        8479,  8481,  8516,  8544,  8545,  8561,  8630,  8633,  8636,  8642,  8665,  8676,  8684,
        8686,  8693,  8798,  8829,  8861,  8864,  8923,  8936,  8950,  8992,  9008,  9010,  9037,
        9055,  9060,  9062,  9103,  9154,  9168,  9176,  9205,  9220,  9222,  9241,  9260,  9268,
        9275,  9286,  9292,  9304,  9330,  9338,  9425,  9428,  9434,  9466,  9475,  9501,  9510,
        9526,  9527,  9568,  9591,  9615,  9631,  9664,  9689,  9690,  9694,  9701,  9702,  9706,
        9727,  9751,  9791,  9797,  9861,  9887,  9921,  9943,  9951,  9962,  9977,  9987,  9996,
        9997,  10000, 10049, 10063, 10096, 10113, 10117, 10140, 10153, 10200, 10220, 10223, 10262,
        10263, 10267, 10276, 10291, 10331, 10390, 10402, 10423, 10437, 10441, 10467, 10484, 10507,
        10509, 10518, 10537, 10550, 10568, 10592, 10624, 10656, 10666, 10667, 10775, 10796, 10801,
        10813, 10844, 10872, 10880, 10898, 10900, 10928, 10953, 10993, 11001, 11002, 11022, 11033,
        11062, 11063, 11083, 11133, 11160, 11162, 11164, 11173, 11201, 11222, 11242, 11251, 11255,
        11258, 11293, 11341, 11350};
    vector<pair<double, int>> distancias;
    // cout << "Size de test " << data_test.size();
    for (int i = 0; i < data_test.size(); i++) {
        // cout << "Iteracion: \nI:" << i << endl;
        double distancia = 0.0;
        for (int j = 0; j < data_training.size(); j++) {
            // cout << "Iteracion: \nI:" << i << "\nJ: " << j << endl;
            for (int k : activadas)
            // for (int k = 0; k < data_training[j].size(); k++)
            {
                // cout << "Iteracion: \nI:" << i << "\nJ: " << j << "\nK:" << k <<
                // endl;
                double aux = data_test[i][k] - data_training[j][k];
                aux = aux * aux;
                distancia += aux;
            }
            distancia = sqrt(distancia);
            pair<double, int> d_v(distancia, labels_training[j]);
            // cout << "Distancia: " << distancia << "\tValor " << labels_training[j]
            // << endl;
            distancias.push_back(d_v);
            distancia = 0.0;
        }
        int valor_label_knn = valorKNN(k_valor, distancias);
        distancias.clear();
        labels_knn.push_back(valor_label_knn);
    }

    int n_aciertos = 0, n_fallos = 0;

    for (int i = 0; i < labels_knn.size(); i++) {
        // cout << "LabelKnn: " << labels_knn[i] << "\t LabelTest " <<
        // labels_test[i] << endl;
        if (labels_knn[i] == labels_test[i]) {
            n_aciertos++;
        } else {
            n_fallos++;
        }
    }

    valor = ((n_aciertos) * 1.0) / (1.0 * (n_aciertos + n_fallos)) * 100;
    // cout << "Valor: " << valor << "\t N_aciertos " << n_aciertos << "\tN_fallos
    // " << n_fallos << endl;
}

void KNN::mostrarResultados() { cout << "0," << valor << "\t" << k_valor << endl; }